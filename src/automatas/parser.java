
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 08 13:35:43 CST 2016
//----------------------------------------------------

package automatas;

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 08 13:35:43 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
  unpackFromStrings(new String[] {
    "\000\011\000\002\003\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\006\007" +
    "\000\002\006\004\000\002\006\004\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
  unpackFromStrings(new String[] {
    "\000\024\000\004\005\005\001\002\000\004\002\026\001" +
    "\002\000\012\006\012\007\006\010\007\011\014\001\002" +
    "\000\004\004\025\001\002\000\004\004\024\001\002\000" +
    "\014\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002" +
    "\000\014\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\001" +
    "\002\000\004\013\020\001\002\000\014\006\012\007\006" +
    "\010\007\011\014\012\017\001\002\000\004\004\015\001" +
    "\002\000\014\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\001\002\000\014\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\015\021" +
    "\001\002\000\004\014\022\001\002\000\004\004\023\001" +
    "\002\000\014\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\001\002\000\014\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\001\002\000\014\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
  unpackFromStrings(new String[] {
    "\000\024\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\012\005\007\006\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\015\006\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
  throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main ( String args[] ) throws Exception {
   new parser(new Scanner(new FileReader(args[0]))).parse(); }

   public void syntax_error(Symbol s){
    com.system += "Error en linea: "+ s.left+"\n";
    com.pantalla.setText(com.system);
  }

  public void report_fatal_error(String message, Object info){
    
    
    com.erros("Codigo de error: " + info.toString()+"\n");
    if("#0".equals(info.toString())){com.erros("error lexico en el token de apertura o cierre \n");}
    if("#1".equals(info.toString())){com.erros("ERROR \n");}
    if("#2".equals(info.toString())){com.erros("palabra reservada incompleta\n(1)punto y coma innecesario\n(2)estructura de programa sin instrucciones validas");}
    if("#3".equals(info.toString())){com.erros("token Inicio faltante \n");}
    if("#4".equals(info.toString())){com.erros("error lexico en palabra reservada,\n(0)verifique mayusculas,\n(1)tokens incompletos\n(2)punto y coma faltante");}
    if("#5".equals(info.toString())){com.erros("punto y coma faltante\n(1)palabra reservada incompleta\n");}
    if("#6".equals(info.toString())){com.erros("punto y coma faltante \n");}
    if("#7".equals(info.toString())){com.erros("error en la funcion Activa \n");}
    if("#8".equals(info.toString())){com.erros("punto y coma faltante\n(1)estructura de programa sin instrucciones validas");}
    if("#9".equals(info.toString())){com.erros("no se pudo localizar la funcion \n");}
    if("#10".equals(info.toString())){com.erros("argumento invalido en la funcion \n");}
    if("#11".equals(info.toString())){com.erros("caracter invalido \n");}
  }
  
  



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  /*CODIGO DE JAVA*/ 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
  throws java.lang.Exception
  {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$parser$result;
    com.completo = true;
    /* select the action based on the action number */
    switch (CUP$parser$act_num)
    {
      /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exprm ::= ACT SEMI 
          {
            Object RESULT = null;
            
            CUP$parser$result = new java_cup.runtime.Symbol(4/*exprm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            if (com.ejec) {
             com.activa();
           }else{
            com.system += "Activa \n";
          }
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exprm ::= GIZ SEMI 
          {
            Object RESULT = null;
            
            CUP$parser$result = new java_cup.runtime.Symbol(4/*exprm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            if (com.ejec) {
                 com.GI();
                               new Thread() {
            public void run() {
                try {
                    
                        Thread.sleep(3000);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();
            }else{
             com.system += "GIzquierda \n";
           }
           
           

         }
         return CUP$parser$result;

         /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exprm ::= GDE SEMI 
          {
            Object RESULT = null;
            CUP$parser$result = new java_cup.runtime.Symbol(4/*exprm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            if (com.ejec) {
                 com.GD();
                               new Thread() {
            public void run() {
                try {
                    
                        Thread.sleep(3000);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();
            }else{
             com.system += "GDerecha \n";
           }
         }
         return CUP$parser$result;

         /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exprm ::= AVAN LPAREN NUMBER RPAREN SEMI 
          {
            Object RESULT = null;
            int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
            int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
            Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
            if (com.ejec) {
                com.avanza(n);
                    new Thread() {
            public void run() {
                try {
                    
                        Thread.sleep(3000);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();
            }else{
              com.system += "Avanza: "+n+"\n";
            }
            
            
            
            CUP$parser$result = new java_cup.runtime.Symbol(4/*exprm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= exprm 
          {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(3/*expr_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_part 
          {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr_part 
          {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICI EOF 
          {
            Object RESULT = null;
            int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
            int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
            Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
            RESULT = start_val;
            CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICI ::= INIC expr_list TERM 
          {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(1/*INICI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
          }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
          throw new Exception(
           "Invalid action number found in internal parse table");

        }
        
      }
      
    }

